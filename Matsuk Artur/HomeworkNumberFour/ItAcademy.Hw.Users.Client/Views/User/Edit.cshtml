@using ItAcademy.Hw.Users.Client.Models
@model CreateUserView
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <p>
        First Name  @Html.EditorFor(a => a.Name)
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
    </p>
    <p>
        Last Name     @Html.EditorFor(a => a.Surname)
        @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })
    </p>
    <p>
        Phone       @Html.EditorFor(a => a.Phone)
        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })

    </p>
    <p>
        Email        @Html.EditorFor(a => a.Email)
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })

    </p>
    <p>
        Title        @Html.EnumDropDownListFor(a => a.Title, "Please select")
        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })

    </p>
    <p>
        Country  
            
             @Html.DropDownListFor(model => model.Country.Id, Model.SelectListCountries, "Please select", new {id="country" })

            @Html.ValidationMessageFor(model => model.Country.Id, "", new { @class = "text-danger" })
                
    </p>
    <p>
        City  
            
             @Html.DropDownListFor(model => model.City.Id, Model.SelectListCities, "Select Country",new { id = "city" })

            @Html.ValidationMessageFor(model => model.City.Id, "", new { @class = "text-danger" })
        
    </p>
            

    <p>
        Comments        @Html.TextAreaFor(a => a.Comments)
        @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    </p>

    <input type="submit" class="btn btn-primary" value="Отправить" />

}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
    $(function () {
        let countryVal = $("#country").val();
        if (countryVal == "") {
            $("#city option:gt(0)").remove();
            $('#city').prop('disabled', true);

        }
        $("#country").on("change", function () {
             countryVal = $("#country").val();

            if (countryVal == "") {
                $("#city option:gt(0)").remove();
                $('#city').prop('disabled', true);

            }
            else {
                $.ajax({
                    method: "GET",
                    url: "/User/GetCitiesByCountry",
                    data: { id: countryVal }
                })
                    .done(function (getCities) {
                        $("#city option:gt(0)").remove();
                        for (var i = 0; i < getCities.length; i++) {
                            $('#city').append('<option value=' + getCities[i].Id + '>' + getCities[i].Name + '</option>');
                        }
                        $('#city').prop('disabled', false);
                    });
            }

        });


    });
        

</script>
}
